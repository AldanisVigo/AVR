
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000082  00800100  00000476  0000050a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000476  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000006  00800182  00800182  0000058c  2**0
                  ALLOC
  3 .comment      00000011  00000000  00000000  0000058c  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000000c0  00000000  00000000  000005a0  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000e01  00000000  00000000  00000660  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000004f1  00000000  00000000  00001461  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000437  00000000  00000000  00001952  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000170  00000000  00000000  00001d8c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002bc  00000000  00000000  00001efc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000031e  00000000  00000000  000021b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000010  00000000  00000000  000024d6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
   c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
  64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d4 e0       	ldi	r29, 0x04	; 4
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
  74:	11 e0       	ldi	r17, 0x01	; 1
  76:	a0 e0       	ldi	r26, 0x00	; 0
  78:	b1 e0       	ldi	r27, 0x01	; 1
  7a:	e6 e7       	ldi	r30, 0x76	; 118
  7c:	f4 e0       	ldi	r31, 0x04	; 4
  7e:	02 c0       	rjmp	.+4      	; 0x84 <__do_copy_data+0x10>
  80:	05 90       	lpm	r0, Z+
  82:	0d 92       	st	X+, r0
  84:	a2 38       	cpi	r26, 0x82	; 130
  86:	b1 07       	cpc	r27, r17
  88:	d9 f7       	brne	.-10     	; 0x80 <__do_copy_data+0xc>

0000008a <__do_clear_bss>:
  8a:	21 e0       	ldi	r18, 0x01	; 1
  8c:	a2 e8       	ldi	r26, 0x82	; 130
  8e:	b1 e0       	ldi	r27, 0x01	; 1
  90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
  92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
  94:	a8 38       	cpi	r26, 0x88	; 136
  96:	b2 07       	cpc	r27, r18
  98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
  9a:	0e 94 78 01 	call	0x2f0	; 0x2f0 <main>
  9e:	0c 94 39 02 	jmp	0x472	; 0x472 <_exit>

000000a2 <__bad_interrupt>:
  a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <uart_putchar>:
 * Sends a character through the transmitter interface.
 *
 * @param (char) c, (FILE *) stream
 * @return (int) 1
 */
int uart_putchar(char c, FILE *stream) {
  a6:	cf 93       	push	r28
  a8:	c8 2f       	mov	r28, r24
    if (c == '\n') {
  aa:	8a 30       	cpi	r24, 0x0A	; 10
  ac:	19 f4       	brne	.+6      	; 0xb4 <uart_putchar+0xe>
        uart_putchar('\r', stream);
  ae:	8d e0       	ldi	r24, 0x0D	; 13
  b0:	0e 94 53 00 	call	0xa6	; 0xa6 <uart_putchar>
    }
    loop_until_bit_is_set(UCSR0A, UDRE0);
  b4:	80 91 c0 00 	lds	r24, 0x00C0
  b8:	85 ff       	sbrs	r24, 5
  ba:	fc cf       	rjmp	.-8      	; 0xb4 <uart_putchar+0xe>
    UDR0 = c;
  bc:	c0 93 c6 00 	sts	0x00C6, r28
    return 0;
}
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	cf 91       	pop	r28
  c6:	08 95       	ret

000000c8 <uart_getchar>:

int uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
  c8:	80 91 c0 00 	lds	r24, 0x00C0
  cc:	87 ff       	sbrs	r24, 7
  ce:	fc cf       	rjmp	.-8      	; 0xc8 <uart_getchar>
    return UDR0;
  d0:	80 91 c6 00 	lds	r24, 0x00C6
}
  d4:	90 e0       	ldi	r25, 0x00	; 0
  d6:	08 95       	ret

000000d8 <uart_init>:
 *
 * @param (void)
 * @return (void)
 */
void uart_init(void) {
    UBRR0H = UBRRH_VALUE;
  d8:	10 92 c5 00 	sts	0x00C5, r1
    UBRR0L = UBRRL_VALUE;
  dc:	87 e6       	ldi	r24, 0x67	; 103
  de:	80 93 c4 00 	sts	0x00C4, r24

    UCSR0C = _BV(UCSZ01) | _BV(UCSZ00);
  e2:	86 e0       	ldi	r24, 0x06	; 6
  e4:	80 93 c2 00 	sts	0x00C2, r24
    UCSR0B = _BV(RXEN0) | _BV(TXEN0);
  e8:	88 e1       	ldi	r24, 0x18	; 24
  ea:	80 93 c1 00 	sts	0x00C1, r24
  ee:	08 95       	ret

000000f0 <receiveWord>:

int uart_getchar(FILE *stream) {
    loop_until_bit_is_set(UCSR0A, RXC0);
    return UDR0;
}
unsigned char receiveWord(const uint16_t length,unsigned char * response){
  f0:	af 92       	push	r10
  f2:	bf 92       	push	r11
  f4:	cf 92       	push	r12
  f6:	df 92       	push	r13
  f8:	ef 92       	push	r14
  fa:	ff 92       	push	r15
  fc:	0f 93       	push	r16
  fe:	1f 93       	push	r17
 100:	cf 93       	push	r28
 102:	df 93       	push	r29
 104:	6c 01       	movw	r12, r24
 106:	7b 01       	movw	r14, r22
    uint16_t index = 0;
    if(length == 0) return 0;
 108:	00 97       	sbiw	r24, 0x00	; 0
 10a:	29 f1       	breq	.+74     	; 0x156 <receiveWord+0x66>
 10c:	8b 01       	movw	r16, r22
 10e:	c0 e0       	ldi	r28, 0x00	; 0
 110:	d0 e0       	ldi	r29, 0x00	; 0
    
    for(index = 0;index < length;index++){
        response[index] = getchar();
 112:	58 01       	movw	r10, r16
 114:	80 91 82 01 	lds	r24, 0x0182
 118:	90 91 83 01 	lds	r25, 0x0183
 11c:	0e 94 c9 01 	call	0x392	; 0x392 <fgetc>
 120:	f8 01       	movw	r30, r16
 122:	81 93       	st	Z+, r24
 124:	8f 01       	movw	r16, r30
        switch (response[index]){
 126:	8a 30       	cpi	r24, 0x0A	; 10
 128:	11 f0       	breq	.+4      	; 0x12e <receiveWord+0x3e>
 12a:	8d 30       	cpi	r24, 0x0D	; 13
 12c:	11 f4       	brne	.+4      	; 0x132 <receiveWord+0x42>
            case '\r':
            case '\n':
                response[index] = '\0';
 12e:	f5 01       	movw	r30, r10
 130:	0e c0       	rjmp	.+28     	; 0x14e <receiveWord+0x5e>
                return index + 1;
            default:
                putchar(response[index]);
 132:	60 91 84 01 	lds	r22, 0x0184
 136:	70 91 85 01 	lds	r23, 0x0185
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	0e 94 07 02 	call	0x40e	; 0x40e <fputc>
}
unsigned char receiveWord(const uint16_t length,unsigned char * response){
    uint16_t index = 0;
    if(length == 0) return 0;
    
    for(index = 0;index < length;index++){
 140:	21 96       	adiw	r28, 0x01	; 1
 142:	cc 15       	cp	r28, r12
 144:	dd 05       	cpc	r29, r13
 146:	29 f7       	brne	.-54     	; 0x112 <receiveWord+0x22>
            default:
                putchar(response[index]);
                break;
        }
    }
    response[index] = '\0';
 148:	f7 01       	movw	r30, r14
 14a:	ec 0f       	add	r30, r28
 14c:	fd 1f       	adc	r31, r29
 14e:	10 82       	st	Z, r1
    return index + 1;
 150:	8c 2f       	mov	r24, r28
 152:	8f 5f       	subi	r24, 0xFF	; 255
 154:	01 c0       	rjmp	.+2      	; 0x158 <receiveWord+0x68>
    loop_until_bit_is_set(UCSR0A, RXC0);
    return UDR0;
}
unsigned char receiveWord(const uint16_t length,unsigned char * response){
    uint16_t index = 0;
    if(length == 0) return 0;
 156:	80 e0       	ldi	r24, 0x00	; 0
                break;
        }
    }
    response[index] = '\0';
    return index + 1;
}
 158:	df 91       	pop	r29
 15a:	cf 91       	pop	r28
 15c:	1f 91       	pop	r17
 15e:	0f 91       	pop	r16
 160:	ff 90       	pop	r15
 162:	ef 90       	pop	r14
 164:	df 90       	pop	r13
 166:	cf 90       	pop	r12
 168:	bf 90       	pop	r11
 16a:	af 90       	pop	r10
 16c:	08 95       	ret

0000016e <set_lcd_pins_direction>:
#include <avr/io.h>
#include <util/delay.h>
#include "lcd.h"

void set_lcd_pins_direction(){
	LCD_D7_DIRECTION |= ( 1 << LCD_D7_BIT );
 16e:	57 9a       	sbi	0x0a, 7	; 10
	LCD_D6_DIRECTION |= ( 1 << LCD_D6_BIT );
 170:	56 9a       	sbi	0x0a, 6	; 10
  	LCD_D5_DIRECTION |= ( 1 << LCD_D5_BIT );
 172:	55 9a       	sbi	0x0a, 5	; 10
    	LCD_D4_DIRECTION |= ( 1 << LCD_D4_BIT );
 174:	54 9a       	sbi	0x0a, 4	; 10
    	LCD_E_DIRECTION  |= ( 1 << LCD_E_BIT  );
 176:	21 9a       	sbi	0x04, 1	; 4
   	LCD_RS_DIRECTION |= ( 1 << LCD_RS_BIT );
 178:	20 9a       	sbi	0x04, 0	; 4
    	LCD_RW_DIRECTION |= ( 1 << LCD_RW_BIT );
 17a:	22 9a       	sbi	0x04, 2	; 4
 17c:	08 95       	ret

0000017e <lcd_write>:
    	lcd_write( command );
    	lcd_write( command << 4 );
}

void lcd_write(uint8_t data){
    	LCD_D7_PORT &= ~( 1<< LCD_D7_BIT );
 17e:	5f 98       	cbi	0x0b, 7	; 11
    	
	if (data & 1 << 7 ){
 180:	87 fd       	sbrc	r24, 7
        	LCD_D7_PORT |= ( 1 << LCD_D7_BIT );
 182:	5f 9a       	sbi	0x0b, 7	; 11
        }
    	
	LCD_D6_PORT &= ~( 1 << LCD_D6_BIT );
 184:	5e 98       	cbi	0x0b, 6	; 11
        
 	if (data & 1 << 6 ){
 186:	86 fd       	sbrc	r24, 6
        	LCD_D6_PORT |= ( 1 << LCD_D6_BIT );
 188:	5e 9a       	sbi	0x0b, 6	; 11
	}

    	LCD_D5_PORT &= ~( 1 << LCD_D5_BIT );
 18a:	5d 98       	cbi	0x0b, 5	; 11

    	if ( data & 1 << 5 ){
 18c:	85 fd       	sbrc	r24, 5
        	LCD_D5_PORT |= ( 1 << LCD_D5_BIT );
 18e:	5d 9a       	sbi	0x0b, 5	; 11
	}

    	LCD_D4_PORT &= ~( 1 << LCD_D4_BIT );
 190:	5c 98       	cbi	0x0b, 4	; 11
    	
	if ( data & 1 << 4 ){
 192:	84 fd       	sbrc	r24, 4
        	LCD_D4_PORT |= ( 1 << LCD_D4_BIT );
 194:	5c 9a       	sbi	0x0b, 4	; 11
    	}

    	LCD_E_PORT |= ( 1 << LCD_E_BIT );
 196:	29 9a       	sbi	0x05, 1	; 5
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	85 e0       	ldi	r24, 0x05	; 5
 19a:	8a 95       	dec	r24
 19c:	f1 f7       	brne	.-4      	; 0x19a <lcd_write+0x1c>
 19e:	00 00       	nop
    	_delay_us( 1 );
    	LCD_E_PORT &= ~( 1 << LCD_E_BIT );
 1a0:	29 98       	cbi	0x05, 1	; 5
 1a2:	85 e0       	ldi	r24, 0x05	; 5
 1a4:	8a 95       	dec	r24
 1a6:	f1 f7       	brne	.-4      	; 0x1a4 <lcd_write+0x26>
 1a8:	00 00       	nop
 1aa:	08 95       	ret

000001ac <lcd_putc>:
        	lcd_putc( str[i] );
        	i++;
    	}
}

void lcd_putc( uint8_t dchar ){
 1ac:	cf 93       	push	r28
 1ae:	c8 2f       	mov	r28, r24
    	LCD_RW_PORT &= ~( 1 << LCD_RW_BIT );;
 1b0:	2a 98       	cbi	0x05, 2	; 5
    	LCD_RS_PORT |= ( 1 << LCD_RS_BIT );
 1b2:	28 9a       	sbi	0x05, 0	; 5
    	LCD_E_PORT &= ~( 1 << LCD_E_BIT );
 1b4:	29 98       	cbi	0x05, 1	; 5
    	lcd_write( dchar );
 1b6:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write>
    	lcd_write( dchar << 4 );
 1ba:	8c 2f       	mov	r24, r28
 1bc:	82 95       	swap	r24
 1be:	80 7f       	andi	r24, 0xF0	; 240
}
 1c0:	cf 91       	pop	r28
void lcd_putc( uint8_t dchar ){
    	LCD_RW_PORT &= ~( 1 << LCD_RW_BIT );;
    	LCD_RS_PORT |= ( 1 << LCD_RS_BIT );
    	LCD_E_PORT &= ~( 1 << LCD_E_BIT );
    	lcd_write( dchar );
    	lcd_write( dchar << 4 );
 1c2:	0c 94 bf 00 	jmp	0x17e	; 0x17e <lcd_write>

000001c6 <lcd_send_command>:
}

void lcd_send_command( uint8_t command ){
 1c6:	cf 93       	push	r28
 1c8:	c8 2f       	mov	r28, r24
    	LCD_RW_PORT &= ~( 1 << LCD_RW_BIT );
 1ca:	2a 98       	cbi	0x05, 2	; 5
    	LCD_RS_PORT &= ~( 1 << LCD_RS_BIT );
 1cc:	28 98       	cbi	0x05, 0	; 5
    	LCD_E_PORT &= ~( 1 << LCD_E_BIT );
 1ce:	29 98       	cbi	0x05, 1	; 5
    	lcd_write( command );
 1d0:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write>
    	lcd_write( command << 4 );
 1d4:	8c 2f       	mov	r24, r28
 1d6:	82 95       	swap	r24
 1d8:	80 7f       	andi	r24, 0xF0	; 240
}
 1da:	cf 91       	pop	r28
void lcd_send_command( uint8_t command ){
    	LCD_RW_PORT &= ~( 1 << LCD_RW_BIT );
    	LCD_RS_PORT &= ~( 1 << LCD_RS_BIT );
    	LCD_E_PORT &= ~( 1 << LCD_E_BIT );
    	lcd_write( command );
    	lcd_write( command << 4 );
 1dc:	0c 94 bf 00 	jmp	0x17e	; 0x17e <lcd_write>

000001e0 <lcd_check_busy_flag>:
    	_delay_us( 1 );
}

void lcd_check_busy_flag( void ){
    uint8_t flag_duplicate;
    LCD_D7_DIRECTION &= ~( 1 << LCD_D7_BIT );
 1e0:	57 98       	cbi	0x0a, 7	; 10
    LCD_RS_PORT &= ~( 1 << LCD_RS_BIT);
 1e2:	28 98       	cbi	0x05, 0	; 5
    LCD_RW_PORT |= ( 1 << LCD_RW_BIT);
 1e4:	2a 9a       	sbi	0x05, 2	; 5
    
    do{
        flag_duplicate = 0;
        LCD_E_PORT |= ( 1 << LCD_E_BIT);
 1e6:	29 9a       	sbi	0x05, 1	; 5
 1e8:	85 e0       	ldi	r24, 0x05	; 5
 1ea:	8a 95       	dec	r24
 1ec:	f1 f7       	brne	.-4      	; 0x1ea <lcd_check_busy_flag+0xa>
 1ee:	00 00       	nop
        _delay_us( 1 );
        flag_duplicate |= ( LCD_D7_PIN & ( 1 << LCD_D7_BIT ) );
 1f0:	89 b1       	in	r24, 0x09	; 9
        LCD_E_PORT &= ~( 1 << LCD_E_BIT );
 1f2:	29 98       	cbi	0x05, 1	; 5
 1f4:	95 e0       	ldi	r25, 0x05	; 5
 1f6:	9a 95       	dec	r25
 1f8:	f1 f7       	brne	.-4      	; 0x1f6 <lcd_check_busy_flag+0x16>
 1fa:	00 00       	nop
        _delay_us( 1 );
        LCD_E_PORT |= ( 1 << LCD_E_BIT );
 1fc:	29 9a       	sbi	0x05, 1	; 5
 1fe:	95 e0       	ldi	r25, 0x05	; 5
 200:	9a 95       	dec	r25
 202:	f1 f7       	brne	.-4      	; 0x200 <lcd_check_busy_flag+0x20>
 204:	00 00       	nop
        _delay_us( 1 );
        LCD_E_PORT &= ~( 1 << LCD_E_BIT );
 206:	29 98       	cbi	0x05, 1	; 5
 208:	95 e0       	ldi	r25, 0x05	; 5
 20a:	9a 95       	dec	r25
 20c:	f1 f7       	brne	.-4      	; 0x20a <lcd_check_busy_flag+0x2a>
 20e:	00 00       	nop
        _delay_us( 1 );
        
    } while ( flag_duplicate );
 210:	87 fd       	sbrc	r24, 7
 212:	e9 cf       	rjmp	.-46     	; 0x1e6 <lcd_check_busy_flag+0x6>
    
    LCD_RW_PORT &= ~( 1 << LCD_RW_BIT );
 214:	2a 98       	cbi	0x05, 2	; 5
    LCD_D7_DIRECTION |= ( 1 << LCD_D7_BIT );
 216:	57 9a       	sbi	0x0a, 7	; 10
 218:	08 95       	ret

0000021a <lcd_init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 21a:	2f ef       	ldi	r18, 0xFF	; 255
 21c:	81 ee       	ldi	r24, 0xE1	; 225
 21e:	94 e0       	ldi	r25, 0x04	; 4
 220:	21 50       	subi	r18, 0x01	; 1
 222:	80 40       	sbci	r24, 0x00	; 0
 224:	90 40       	sbci	r25, 0x00	; 0
 226:	e1 f7       	brne	.-8      	; 0x220 <lcd_init+0x6>
 228:	00 c0       	rjmp	.+0      	; 0x22a <lcd_init+0x10>
 22a:	00 00       	nop
    	LCD_RW_DIRECTION |= ( 1 << LCD_RW_BIT );
}

void lcd_init( void ){
   	 _delay_ms( 100 );
    	LCD_RS_PORT &= ~( 1 << LCD_RS_BIT );
 22c:	28 98       	cbi	0x05, 0	; 5
    	LCD_E_PORT &= ~( 1 << LCD_E_BIT );
 22e:	29 98       	cbi	0x05, 1	; 5
    	LCD_RW_PORT &= ~( 1 << LCD_RW_BIT );
 230:	2a 98       	cbi	0x05, 2	; 5
    	lcd_write(LCD_RESET);
 232:	80 e3       	ldi	r24, 0x30	; 48
 234:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write>
 238:	8f e3       	ldi	r24, 0x3F	; 63
 23a:	9c e9       	ldi	r25, 0x9C	; 156
 23c:	01 97       	sbiw	r24, 0x01	; 1
 23e:	f1 f7       	brne	.-4      	; 0x23c <lcd_init+0x22>
 240:	00 c0       	rjmp	.+0      	; 0x242 <lcd_init+0x28>
 242:	00 00       	nop
    	_delay_ms( 10 );
    	lcd_write(LCD_RESET);
 244:	80 e3       	ldi	r24, 0x30	; 48
 246:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 24a:	8f e1       	ldi	r24, 0x1F	; 31
 24c:	93 e0       	ldi	r25, 0x03	; 3
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <lcd_init+0x34>
 252:	00 c0       	rjmp	.+0      	; 0x254 <lcd_init+0x3a>
 254:	00 00       	nop
    	_delay_us( 200 );
    	lcd_write( LCD_RESET );
 256:	80 e3       	ldi	r24, 0x30	; 48
 258:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write>
 25c:	8f e3       	ldi	r24, 0x3F	; 63
 25e:	91 e0       	ldi	r25, 0x01	; 1
 260:	01 97       	sbiw	r24, 0x01	; 1
 262:	f1 f7       	brne	.-4      	; 0x260 <lcd_init+0x46>
 264:	00 c0       	rjmp	.+0      	; 0x266 <lcd_init+0x4c>
 266:	00 00       	nop
    	_delay_us( 80 );
    	lcd_write( LCD_FOUR_BIT_MODE );
 268:	88 e2       	ldi	r24, 0x28	; 40
 26a:	0e 94 bf 00 	call	0x17e	; 0x17e <lcd_write>
    	lcd_check_busy_flag();
 26e:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_FOUR_BIT_MODE );
 272:	88 e2       	ldi	r24, 0x28	; 40
 274:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
    	lcd_check_busy_flag();
 278:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_DISPLAY_OFF );
 27c:	88 e0       	ldi	r24, 0x08	; 8
 27e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
    	lcd_check_busy_flag();
 282:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_CLEAR );
 286:	81 e0       	ldi	r24, 0x01	; 1
 288:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
    	lcd_check_busy_flag();
 28c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_ENTRY_MODE );
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
    	lcd_check_busy_flag();
 296:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_DISPLAY_ON );
 29a:	8c e0       	ldi	r24, 0x0C	; 12
 29c:	0c 94 e3 00 	jmp	0x1c6	; 0x1c6 <lcd_send_command>

000002a0 <lcd_puts>:
}

void lcd_puts( uint8_t str[] ){
 2a0:	0f 93       	push	r16
 2a2:	1f 93       	push	r17
 2a4:	cf 93       	push	r28
 2a6:	df 93       	push	r29
 2a8:	00 d0       	rcall	.+0      	; 0x2aa <lcd_puts+0xa>
 2aa:	cd b7       	in	r28, 0x3d	; 61
 2ac:	de b7       	in	r29, 0x3e	; 62
 2ae:	8c 01       	movw	r16, r24
    	volatile int i = 0;
 2b0:	1a 82       	std	Y+2, r1	; 0x02
 2b2:	19 82       	std	Y+1, r1	; 0x01
    	while ( str[i] != 0 ){
 2b4:	e9 81       	ldd	r30, Y+1	; 0x01
 2b6:	fa 81       	ldd	r31, Y+2	; 0x02
 2b8:	e0 0f       	add	r30, r16
 2ba:	f1 1f       	adc	r31, r17
 2bc:	80 81       	ld	r24, Z
 2be:	88 23       	and	r24, r24
 2c0:	81 f0       	breq	.+32     	; 0x2e2 <lcd_puts+0x42>
       		lcd_check_busy_flag();
 2c2:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
        	lcd_putc( str[i] );
 2c6:	e9 81       	ldd	r30, Y+1	; 0x01
 2c8:	fa 81       	ldd	r31, Y+2	; 0x02
 2ca:	e0 0f       	add	r30, r16
 2cc:	f1 1f       	adc	r31, r17
 2ce:	80 81       	ld	r24, Z
 2d0:	0e 94 d6 00 	call	0x1ac	; 0x1ac <lcd_putc>
        	i++;
 2d4:	29 81       	ldd	r18, Y+1	; 0x01
 2d6:	3a 81       	ldd	r19, Y+2	; 0x02
 2d8:	2f 5f       	subi	r18, 0xFF	; 255
 2da:	3f 4f       	sbci	r19, 0xFF	; 255
 2dc:	3a 83       	std	Y+2, r19	; 0x02
 2de:	29 83       	std	Y+1, r18	; 0x01
 2e0:	e9 cf       	rjmp	.-46     	; 0x2b4 <lcd_puts+0x14>
    	}
}
 2e2:	0f 90       	pop	r0
 2e4:	0f 90       	pop	r0
 2e6:	df 91       	pop	r29
 2e8:	cf 91       	pop	r28
 2ea:	1f 91       	pop	r17
 2ec:	0f 91       	pop	r16
 2ee:	08 95       	ret

000002f0 <main>:
uint8_t machine_name[]     = " Exposure Unit  ";
uint8_t program_version[]  = "  Version 1.0   ";
uint8_t program_date[]     = "  Oct 31, 2015  ";

int main( void ){	
    	set_lcd_pins_direction();
 2f0:	0e 94 b7 00 	call	0x16e	; 0x16e <set_lcd_pins_direction>
	lcd_init();
 2f4:	0e 94 0d 01 	call	0x21a	; 0x21a <lcd_init>
    	lcd_puts( program_author );
 2f8:	83 e3       	ldi	r24, 0x33	; 51
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_puts>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 300:	2f ef       	ldi	r18, 0xFF	; 255
 302:	87 ea       	ldi	r24, 0xA7	; 167
 304:	91 e6       	ldi	r25, 0x61	; 97
 306:	21 50       	subi	r18, 0x01	; 1
 308:	80 40       	sbci	r24, 0x00	; 0
 30a:	90 40       	sbci	r25, 0x00	; 0
 30c:	e1 f7       	brne	.-8      	; 0x306 <main+0x16>
 30e:	00 c0       	rjmp	.+0      	; 0x310 <main+0x20>
 310:	00 00       	nop
    	_delay_ms(2000);
    	lcd_check_busy_flag();
 312:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_CLEAR );
 316:	81 e0       	ldi	r24, 0x01	; 1
 318:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
    	lcd_puts( machine_name );
 31c:	82 e2       	ldi	r24, 0x22	; 34
 31e:	91 e0       	ldi	r25, 0x01	; 1
 320:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_puts>
    	lcd_check_busy_flag();
 324:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_SET_CURSOR_POS | LCD_SECOND_LINE );
 328:	80 ec       	ldi	r24, 0xC0	; 192
 32a:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
    	lcd_puts( program_version );
 32e:	81 e1       	ldi	r24, 0x11	; 17
 330:	91 e0       	ldi	r25, 0x01	; 1
 332:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_puts>
 336:	2f ef       	ldi	r18, 0xFF	; 255
 338:	83 e2       	ldi	r24, 0x23	; 35
 33a:	94 ef       	ldi	r25, 0xF4	; 244
 33c:	21 50       	subi	r18, 0x01	; 1
 33e:	80 40       	sbci	r24, 0x00	; 0
 340:	90 40       	sbci	r25, 0x00	; 0
 342:	e1 f7       	brne	.-8      	; 0x33c <main+0x4c>
 344:	00 c0       	rjmp	.+0      	; 0x346 <main+0x56>
 346:	00 00       	nop
   	_delay_ms( 5000 );
    	lcd_check_busy_flag();
 348:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_CLEAR );
 34c:	81 e0       	ldi	r24, 0x01	; 1
 34e:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
    	//You can multiplex these pins by enabling and disabling the LCD display.
    	lcd_puts( "Lx = 15uH " );
 352:	80 e6       	ldi	r24, 0x60	; 96
 354:	91 e0       	ldi	r25, 0x01	; 1
 356:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_puts>
    	lcd_check_busy_flag();
 35a:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
    	lcd_send_command( LCD_SET_CURSOR_POS | LCD_SECOND_LINE );
 35e:	80 ec       	ldi	r24, 0xC0	; 192
 360:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
    	lcd_puts( "Cx = 150uF" );
 364:	8b e6       	ldi	r24, 0x6B	; 107
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_puts>
    	lcd_check_busy_flag();
 36c:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <lcd_check_busy_flag>
 370:	2f ef       	ldi	r18, 0xFF	; 255
 372:	87 ea       	ldi	r24, 0xA7	; 167
 374:	91 e6       	ldi	r25, 0x61	; 97
 376:	21 50       	subi	r18, 0x01	; 1
 378:	80 40       	sbci	r24, 0x00	; 0
 37a:	90 40       	sbci	r25, 0x00	; 0
 37c:	e1 f7       	brne	.-8      	; 0x376 <main+0x86>
 37e:	00 c0       	rjmp	.+0      	; 0x380 <main+0x90>
 380:	00 00       	nop
	_delay_ms(2000);
	lcd_send_command( LCD_CLEAR );
 382:	81 e0       	ldi	r24, 0x01	; 1
 384:	0e 94 e3 00 	call	0x1c6	; 0x1c6 <lcd_send_command>
	lcd_puts("Hello Jenn!");
 388:	86 e7       	ldi	r24, 0x76	; 118
 38a:	91 e0       	ldi	r25, 0x01	; 1
 38c:	0e 94 50 01 	call	0x2a0	; 0x2a0 <lcd_puts>
 390:	ff cf       	rjmp	.-2      	; 0x390 <main+0xa0>

00000392 <fgetc>:
 392:	cf 93       	push	r28
 394:	df 93       	push	r29
 396:	ec 01       	movw	r28, r24
 398:	2b 81       	ldd	r18, Y+3	; 0x03
 39a:	20 ff       	sbrs	r18, 0
 39c:	33 c0       	rjmp	.+102    	; 0x404 <fgetc+0x72>
 39e:	26 ff       	sbrs	r18, 6
 3a0:	0a c0       	rjmp	.+20     	; 0x3b6 <fgetc+0x24>
 3a2:	2f 7b       	andi	r18, 0xBF	; 191
 3a4:	2b 83       	std	Y+3, r18	; 0x03
 3a6:	8e 81       	ldd	r24, Y+6	; 0x06
 3a8:	9f 81       	ldd	r25, Y+7	; 0x07
 3aa:	01 96       	adiw	r24, 0x01	; 1
 3ac:	9f 83       	std	Y+7, r25	; 0x07
 3ae:	8e 83       	std	Y+6, r24	; 0x06
 3b0:	8a 81       	ldd	r24, Y+2	; 0x02
 3b2:	90 e0       	ldi	r25, 0x00	; 0
 3b4:	29 c0       	rjmp	.+82     	; 0x408 <fgetc+0x76>
 3b6:	22 ff       	sbrs	r18, 2
 3b8:	0f c0       	rjmp	.+30     	; 0x3d8 <fgetc+0x46>
 3ba:	e8 81       	ld	r30, Y
 3bc:	f9 81       	ldd	r31, Y+1	; 0x01
 3be:	80 81       	ld	r24, Z
 3c0:	99 27       	eor	r25, r25
 3c2:	87 fd       	sbrc	r24, 7
 3c4:	90 95       	com	r25
 3c6:	00 97       	sbiw	r24, 0x00	; 0
 3c8:	19 f4       	brne	.+6      	; 0x3d0 <fgetc+0x3e>
 3ca:	20 62       	ori	r18, 0x20	; 32
 3cc:	2b 83       	std	Y+3, r18	; 0x03
 3ce:	1a c0       	rjmp	.+52     	; 0x404 <fgetc+0x72>
 3d0:	31 96       	adiw	r30, 0x01	; 1
 3d2:	f9 83       	std	Y+1, r31	; 0x01
 3d4:	e8 83       	st	Y, r30
 3d6:	0e c0       	rjmp	.+28     	; 0x3f4 <fgetc+0x62>
 3d8:	ea 85       	ldd	r30, Y+10	; 0x0a
 3da:	fb 85       	ldd	r31, Y+11	; 0x0b
 3dc:	09 95       	icall
 3de:	97 ff       	sbrs	r25, 7
 3e0:	09 c0       	rjmp	.+18     	; 0x3f4 <fgetc+0x62>
 3e2:	2b 81       	ldd	r18, Y+3	; 0x03
 3e4:	01 96       	adiw	r24, 0x01	; 1
 3e6:	11 f4       	brne	.+4      	; 0x3ec <fgetc+0x5a>
 3e8:	80 e1       	ldi	r24, 0x10	; 16
 3ea:	01 c0       	rjmp	.+2      	; 0x3ee <fgetc+0x5c>
 3ec:	80 e2       	ldi	r24, 0x20	; 32
 3ee:	82 2b       	or	r24, r18
 3f0:	8b 83       	std	Y+3, r24	; 0x03
 3f2:	08 c0       	rjmp	.+16     	; 0x404 <fgetc+0x72>
 3f4:	2e 81       	ldd	r18, Y+6	; 0x06
 3f6:	3f 81       	ldd	r19, Y+7	; 0x07
 3f8:	2f 5f       	subi	r18, 0xFF	; 255
 3fa:	3f 4f       	sbci	r19, 0xFF	; 255
 3fc:	3f 83       	std	Y+7, r19	; 0x07
 3fe:	2e 83       	std	Y+6, r18	; 0x06
 400:	99 27       	eor	r25, r25
 402:	02 c0       	rjmp	.+4      	; 0x408 <fgetc+0x76>
 404:	8f ef       	ldi	r24, 0xFF	; 255
 406:	9f ef       	ldi	r25, 0xFF	; 255
 408:	df 91       	pop	r29
 40a:	cf 91       	pop	r28
 40c:	08 95       	ret

0000040e <fputc>:
 40e:	0f 93       	push	r16
 410:	1f 93       	push	r17
 412:	cf 93       	push	r28
 414:	df 93       	push	r29
 416:	18 2f       	mov	r17, r24
 418:	09 2f       	mov	r16, r25
 41a:	eb 01       	movw	r28, r22
 41c:	8b 81       	ldd	r24, Y+3	; 0x03
 41e:	81 fd       	sbrc	r24, 1
 420:	03 c0       	rjmp	.+6      	; 0x428 <fputc+0x1a>
 422:	8f ef       	ldi	r24, 0xFF	; 255
 424:	9f ef       	ldi	r25, 0xFF	; 255
 426:	20 c0       	rjmp	.+64     	; 0x468 <fputc+0x5a>
 428:	82 ff       	sbrs	r24, 2
 42a:	10 c0       	rjmp	.+32     	; 0x44c <fputc+0x3e>
 42c:	4e 81       	ldd	r20, Y+6	; 0x06
 42e:	5f 81       	ldd	r21, Y+7	; 0x07
 430:	2c 81       	ldd	r18, Y+4	; 0x04
 432:	3d 81       	ldd	r19, Y+5	; 0x05
 434:	42 17       	cp	r20, r18
 436:	53 07       	cpc	r21, r19
 438:	7c f4       	brge	.+30     	; 0x458 <fputc+0x4a>
 43a:	e8 81       	ld	r30, Y
 43c:	f9 81       	ldd	r31, Y+1	; 0x01
 43e:	9f 01       	movw	r18, r30
 440:	2f 5f       	subi	r18, 0xFF	; 255
 442:	3f 4f       	sbci	r19, 0xFF	; 255
 444:	39 83       	std	Y+1, r19	; 0x01
 446:	28 83       	st	Y, r18
 448:	10 83       	st	Z, r17
 44a:	06 c0       	rjmp	.+12     	; 0x458 <fputc+0x4a>
 44c:	e8 85       	ldd	r30, Y+8	; 0x08
 44e:	f9 85       	ldd	r31, Y+9	; 0x09
 450:	81 2f       	mov	r24, r17
 452:	09 95       	icall
 454:	89 2b       	or	r24, r25
 456:	29 f7       	brne	.-54     	; 0x422 <fputc+0x14>
 458:	2e 81       	ldd	r18, Y+6	; 0x06
 45a:	3f 81       	ldd	r19, Y+7	; 0x07
 45c:	2f 5f       	subi	r18, 0xFF	; 255
 45e:	3f 4f       	sbci	r19, 0xFF	; 255
 460:	3f 83       	std	Y+7, r19	; 0x07
 462:	2e 83       	std	Y+6, r18	; 0x06
 464:	81 2f       	mov	r24, r17
 466:	90 2f       	mov	r25, r16
 468:	df 91       	pop	r29
 46a:	cf 91       	pop	r28
 46c:	1f 91       	pop	r17
 46e:	0f 91       	pop	r16
 470:	08 95       	ret

00000472 <_exit>:
 472:	f8 94       	cli

00000474 <__stop_program>:
 474:	ff cf       	rjmp	.-2      	; 0x474 <__stop_program>
